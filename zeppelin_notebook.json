{"paragraphs":[{"text":"import java.io.File\n\nval listOfFiles = new File(\"/Examples/taxi_log_2008_by_id\")\n    .listFiles()\n    .filter(_.isFile)\n    .map(_.getAbsolutePath)\n    .toList\n    \nimport scala.io.Source\nimport java.sql.Timestamp\nimport spark.implicits._\n\ncase class Position(vehicleId:Int, timestamp:Timestamp, lng:Double, lat:Double)\n\nval allDataDF = spark.sparkContext.parallelize(listOfFiles, 2)\n  .mapPartitions(partition => {\n    partition.map(fileDir => {\n      val bufferedSource = Source.fromFile(fileDir)\n\n      val output = bufferedSource\n        .getLines\n        .toVector\n        .map(row => row.split(\",\"))\n        .map(row => Position(row(0).toInt, Timestamp.valueOf(row(1)), row(2).toDouble,  row(3).toDouble))\n\n      bufferedSource.close()\n      output\n    })\n  })\n  .flatMap(x => x)\n  .toDF()","user":"anonymous","dateUpdated":"2020-01-31T13:03:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":185,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import java.io.File\nlistOfFiles: List[String] = List(/Examples/taxi_log_2008_by_id/3644.txt, /Examples/taxi_log_2008_by_id/5235.txt, /Examples/taxi_log_2008_by_id/1053.txt, /Examples/taxi_log_2008_by_id/8711.txt, /Examples/taxi_log_2008_by_id/7422.txt, /Examples/taxi_log_2008_by_id/8077.txt, /Examples/taxi_log_2008_by_id/7344.txt, /Examples/taxi_log_2008_by_id/1735.txt, /Examples/taxi_log_2008_by_id/9369.txt, /Examples/taxi_log_2008_by_id/5553.txt, /Examples/taxi_log_2008_by_id/4895.txt, /Examples/taxi_log_2008_by_id/3122.txt, /Examples/taxi_log_2008_by_id/5547.txt, /Examples/taxi_log_2008_by_id/4881.txt, /Examples/taxi_log_2008_by_id/2228.txt, /Examples/taxi_log_2008_by_id/3136.txt, /Examples/taxi_log_2008_by_id/4659.txt, /Examples/taxi_log_2008_by_id/8063.txt, /Examples/taxi_log_2008_..."}]},"apps":[],"jobName":"paragraph_1580462309762_562282080","id":"20200131-091829_1805489518","dateCreated":"2020-01-31T09:18:29+0000","dateStarted":"2020-01-31T10:53:44+0000","dateFinished":"2020-01-31T10:55:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5255"},{"text":"allDataDF.printSchema","user":"anonymous","dateUpdated":"2020-01-31T13:03:25+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- vehicleId: integer (nullable = false)\n |-- timestamp: timestamp (nullable = true)\n |-- lng: double (nullable = false)\n |-- lat: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1580462299005_1776451651","id":"20200131-091819_144711932","dateCreated":"2020-01-31T09:18:19+0000","dateStarted":"2020-01-31T10:59:50+0000","dateFinished":"2020-01-31T10:59:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5256"},{"text":"allDataDF.describe(\"lng\", \"lat\").show()","user":"anonymous","dateUpdated":"2020-01-31T13:03:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------------------+------------------+\n|summary|               lng|               lat|\n+-------+------------------+------------------+\n|  count|          17662984|          17662984|\n|   mean|116.18014319416969| 39.84973016182914|\n| stddev|   5.4408490895028|1.9040820750535836|\n|    min|               0.0|               0.0|\n|    max|             255.3|          96.06767|\n+-------+------------------+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1580464561911_-1617830677","id":"20200131-095601_555994901","dateCreated":"2020-01-31T09:56:01+0000","dateStarted":"2020-01-31T11:00:01+0000","dateFinished":"2020-01-31T11:01:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5257"},{"text":"import org.apache.spark.sql.types.{StringType, StructField, StructType}\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql._\n\ndef fiveNumberSummaryBySQL(dataFrame: DataFrame, columns:String*): DataFrame = {\n    val viewName = \"all_data_tmp\"\n    allDataDF.createOrReplaceTempView(viewName)\n\n    val input: Seq[(Int, Seq[String])] = List(\n      (0, \"min\" :: Nil),\n      (1, \"first quartile\" :: Nil),\n      (2, \"median\" :: Nil),\n      (3, \"third quartile\" :: Nil),\n      (4, \"max\" :: Nil))\n\n    def query(input: Seq[(Int, Seq[String])], columns:List[String]):Seq[(Int, Seq[String])] = columns match {\n      case Nil => input\n      case head :: tail => {\n        val agg = spark\n          .sql(s\"SELECT MIN($head) as min, percentile_approx($head, array(0.25,0.5,0.75), 100) as quartile, MAX($head) as max FROM $viewName\")\n          .head()\n\n        val queryOutput: Seq[Double] = agg.getDouble(0) +: agg.getSeq[Double](1) :+ agg.getDouble(2)\n\n        val output = input.map(item => (item._1, item._2 :+ queryOutput(item._1).toString))\n\n        query(output, tail)\n      }\n    }\n\n    val summaryRDD: RDD[Row] = spark.sparkContext.parallelize(query(input, columns.toList).map(item =>  Row.fromSeq(item._2)))\n\n    val fields: Array[StructField] =\n      StructField(\"summary\", StringType, true) +:\n        columns.map(columnName => StructField(columnName, StringType, true)).toArray\n\n    val schema: StructType = new StructType(fields)\n\n    spark.createDataFrame(summaryRDD, schema)\n}","user":"anonymous","dateUpdated":"2020-01-31T13:03:35+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types.{StringType, StructField, StructType}\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql._\nfiveNumberSummaryBySQL: (dataFrame: org.apache.spark.sql.DataFrame, columns: String*)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1580463955635_859789858","id":"20200131-094555_2029611886","dateCreated":"2020-01-31T09:45:55+0000","dateStarted":"2020-01-31T12:19:24+0000","dateFinished":"2020-01-31T12:19:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5258"},{"text":"fiveNumberSummaryBySQL(allDataDF,\"lng\", \"lat\").show","user":"anonymous","dateUpdated":"2020-01-31T12:55:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------+---------+--------+\n|       summary|      lng|     lat|\n+--------------+---------+--------+\n|           min|      0.0|     0.0|\n|first quartile|116.33373|39.87997|\n|        median|116.40467|39.92285|\n|third quartile|  116.475|39.98097|\n|           max|    255.3|96.06767|\n+--------------+---------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1580464949425_-1951356595","id":"20200131-100229_1027226342","dateCreated":"2020-01-31T10:02:29+0000","dateStarted":"2020-01-31T12:20:38+0000","dateFinished":"2020-01-31T12:25:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5259"},{"text":"def histogramDataBySql(dataframe:DataFrame, column:String): DataFrame = {\n  val viewName = \"all_data_tmp\"\n  allDataDF.createOrReplaceTempView(viewName)\n\n  spark.sql(s\"SELECT ROUND($column,1) as aggregated_$column, count(*) as count FROM $viewName GROUP BY aggregated_$column ORDER BY aggregated_$column ASC\")\n}","user":"anonymous","dateUpdated":"2020-01-31T13:02:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"histogramDataBySql: (dataframe: org.apache.spark.sql.DataFrame, column: String)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1580464314300_1041633571","id":"20200131-095154_857160859","dateCreated":"2020-01-31T09:51:54+0000","dateStarted":"2020-01-31T12:48:42+0000","dateFinished":"2020-01-31T12:48:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5260"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580475368900_-998542407","id":"20200131-125608_1339113575","dateCreated":"2020-01-31T12:56:08+0000","status":"RUNNING","progressUpdateIntervalMs":500,"$$hashKey":"object:5263","text":"val lngHistogram =  histogramDataBySql(allDataDF, \"lng\")\nz.show(lngHistogram)","dateUpdated":"2020-01-31T13:02:53+0000","dateStarted":"2020-01-31T13:02:53+0000","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580475773117_1845139743","id":"20200131-130253_1238758589","dateCreated":"2020-01-31T13:02:53+0000","status":"PENDING","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6706","text":"val latgHistogram =  histogramDataBySql(allDataDF, \"lat\")\nz.show(latgHistogram)","dateUpdated":"2020-01-31T13:04:10+0000","dateStarted":"2020-01-31T13:04:10+0000","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580475850148_-1832198973","id":"20200131-130410_131473717","dateCreated":"2020-01-31T13:04:10+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6851"}],"name":"spark_test_1","id":"2EVYFAQJF","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}